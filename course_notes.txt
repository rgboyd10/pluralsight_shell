-rw-rw-r--
need to enable execute on the file with chmod

editing ownership for execution - chmod u+x /home/rboyd/bin/simple_script.sh

u - user owner
+ - add permission
x - execute permission

-------------------------

Creating a simple script review
Creating a file with a .sh extension

use #!/bin/bash/ - called a hasbang or shebang

#comments come after the "#"

echo "Hi there..." - print string of text to standard out.

executing - the user needs to have a execute permissions on the file
--------------------------

Course Outline
Executing Scripts
Referencing Variables
Manipulating Variables
Positional Variables

Executing Scripts
~/bin/simple_script.sh
~ = $HOME
echo $HOME = echo ~
./  = Current directory
./simple_script.sh
echo $PATH
Don't give scripts the same name as system commands.
bash ./simple_script.sh
Forking creates new processes with independent environments.
. ./simple_script.sh - sourcing the script.  Tell's the 
If you define a variable and then insert into simple_script.sh, it will not be seen when you execute it normally unless you execute it on the forked environment using . ./simple_script.sh
It's best practice to give execute permission and call an interpreter in our script.
~ and ./ can often be used to save typing.
"Sourcing" a script will run it in the current environment.
-----------------------

Variables
echo -e tells echo to interpret special charactesr within the command
values entered between single quotes '' are interpreted literally
You can populate a variables with the output of a command - variable=$(command)
Positional Parameters
command <arg1> <arg2> <arg3> <argn>
0	1      2      3	     4
cp ~/bin/script1.sh ~/archive/script1.sh
0  1		    2	
$ - the standard way to address variables
$1 $2 $3 are read only variables that automatically hold the values of arguments that we pass into our scripts.
shift - shift without any arguments shifts each position paramters one space to the left
$# = Total number of args
#@  = All args as a list
$* = All args as a single value
What was covered
executing scripts
define interp
assign eecute permissions
source the script
       call it with . or the source command
positional parameters
------------------------

Getting User Input
read - "Enter first number: " value1
read - is the command to get input from the user
-p switch displays the prompt for the user to see
"Enter first number; " is the prompt that the user will see
value1 creates a new variable that will store the users input
$REPLY stores the user input read in from the let command
You can execute read from the shell.
If more values are specified than variables, the last variable will store all input after you have used all variables.
What we covered
the read command
command options that allo us to modify the read commands function.  
-s supprress user input from being displayed on the screen
-n1 limit the number of characters the user could input
$REPLY - this is where read will store user input if we don't give it somewhere else to store it.
storing multiple values from the user.
-----------------------

Conditionals
	Outline
	Primer
	if conditional
	case conditional
	build a script

if free disk space < 10%
then do this 
else do this
fi

if[[$# -eq 0]]
$# - keeps account of the positional parameters passed in from the command line 
$* = "arg1 arg2 arg3 ...argn"
$@ = "arg1" "arg2" "arg3"...
$(basename $0) = scriptname.sh
$0 = /path/to/script_name.sh
File Test Operators
-e File exists
-b Block device files
-c char device files
-f regular files
-d directories
-r read access
-w write access
-x execute permissions
-s Same as -x

WHAT was COVERED
conditionals primer
if conditional
nesting
case statement
-----------------------

Loops

Outline
for
while
until
loop processing

Loops are a programming structure that allow us to run a piece of code several times, and then stop when a certain condition is met.

for i in $var ; do
for i ; do

-le less than or equal to
-ge greater than or equal to

continue
break
until
--------------------

Outline
simple menus
functions
scheduling

Creating menus with select

Don't give functions the same names as alias, built-ins or the $PATH variable.

function()
{

}

Scheduling

Recurring
Cron
	-can schedule jobs while the machine is on.
	-main flaw is that it doesn't like the system being powered off.

7 16 * * 0
7 - minute
16 - hour
* - day of month
* - month number
0 - day of week


  
Anacron
	-does check for jobs after downtime. Can only run a job once a day.

One-off
at
bat

crontab files
.sh file
-------------------------------------

echo command
exit codes
xtrace

echo
 $? - last status is stored here

xtrace - useful in debugging
prints all script commands to the screen before it executes them.

bash -x enables xtrace

set -x (xtrace on)
set +x (xtrace off)
